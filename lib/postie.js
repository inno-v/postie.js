// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  window.Postie = {};

  Postie.Client = (function() {

    Client.prototype._callbacks = [];

    function Client(serverFrame) {
      this._receive = __bind(this._receive, this);
      this._listen();
      this._frame = this._parseFrame(serverFrame);
    }

    Client.prototype.ready = function(callback) {
      var _this = this;
      return $(this._frame.document).ready(function() {
        var uuid;
        uuid = _this._dispatch('_getEndpoints', true);
        return _this._registerCallback(uuid, function(methods) {
          _this._createEndpoints(methods);
          return callback();
        });
      });
    };

    Client.prototype._registerCallback = function(uuid, fn) {
      this._callbacks.push({
        uuid: uuid,
        fn: fn
      });
      return [uuid, fn];
    };

    Client.prototype._parseFrame = function(frame) {
      if (typeof frame === 'string') {
        frame = document.getElementById(frame);
      }
      if (typeof frame.contentWindow === 'object') {
        frame = frame.contentWindow;
      }
      try {
        if (typeof frame.postMessage === 'function') {
          return frame;
        }
      } catch (err) {
        throw new Error("Could not establish postMessage API for frame: " + frame + ", must be an iframe");
      }
    };

    Client.prototype._createEndpoints = function(endpoints) {
      var endpoint, _i, _len;
      for (_i = 0, _len = endpoints.length; _i < _len; _i++) {
        endpoint = endpoints[_i];
        this[endpoint] = function() {
          var args, callback, data, uuid, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref = this._parseArgs(args), data = _ref[0], callback = _ref[1];
          uuid = this._dispatch(endpoint, data);
          if (callback != null) {
            return this._registerCallback(uuid, callback);
          }
        };
      }
      return this;
    };

    Client.prototype._parseArgs = function(args) {
      var arg;
      if (args.length > 2) {
        throw new Error('ArgumentError: more than 2 args passed to an endpoint. Pass a data argument and a callback argument only');
      }
      if (args.length === 2) {
        return args;
      }
      if (args.length === 1) {
        arg = args[0];
        if (typeof arg === 'function') {
          return [null, arg];
        } else {
          return [arg, null];
        }
      }
      return [null, null];
    };

    Client.prototype._dispatch = function(method, data) {
      var payload, uuid;
      uuid = this._generateUuid();
      payload = this._payload(uuid, method, data);
      this._frame.postMessage(payload, '*');
      return uuid;
    };

    Client.prototype._payload = function(uuid, method, data) {
      var message;
      message = {
        uuid: uuid,
        method: method,
        payload: data
      };
      return JSON.stringify(message);
    };

    Client.prototype._generateUuid = function() {
      var s4;
      s4 = function() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };
      return "" + (s4()) + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + (s4()) + (s4());
    };

    Client.prototype._listen = function() {
      if (window.addEventListener != null) {
        return window.addEventListener('message', this._receive, false);
      } else if (window.attachEvent != null) {
        return window.attachEvent('onmessage', this._receive);
      } else {
        throw new Error('cannot bind to postMessage "message" event on window');
      }
    };

    Client.prototype._receive = function(rawEvent) {
      var callback, event;
      event = new Postie.Event(rawEvent);
      callback = _.find(this._callbacks, function(cb) {
        return cb.uuid === event.uuid;
      });
      if (callback == null) {
        return;
      }
      callback.fn(event.data);
      return this._callbacks = _.without(this._callbacks, callback);
    };

    return Client;

  })();

  Postie.Event = (function() {

    Event.prototype.success = false;

    function Event(event) {
      var message;
      message = JSON.parse(event.data);
      this.uuid = message.uuid;
      this.method = message.method;
      this.data = message.payload;
      this.source = event.source;
    }

    return Event;

  })();

  Postie.Server = (function() {

    Server.prototype.endpoints = [];

    function Server(options) {
      if (options == null) {
        options = {};
      }
      this.receive = __bind(this.receive, this);

      this.receiver = options.receiver;
      this._listEndpoints();
    }

    Server.prototype.receive = function(rawEvent) {
      var event, responseData;
      event = new Postie.Event(rawEvent);
      if (event.method === '_getEndpoints') {
        return this.dispatch(event, this.endpoints);
      }
      responseData = this.receiver[event.method](event.data);
      return this.dispatch(event, responseData);
    };

    Server.prototype.dispatch = function(event, responseData) {
      var frame, payload;
      frame = event.source;
      payload = this.payload(event.uuid, responseData);
      frame.postMessage(payload, '*');
      return event.uuid;
    };

    Server.prototype.payload = function(uuid, data) {
      var message;
      message = {
        uuid: uuid,
        payload: data
      };
      return JSON.stringify(message);
    };

    Server.prototype.listen = function() {
      if (window.addEventListener != null) {
        return window.addEventListener('message', this.receive, false);
      } else if (window.attachEvent != null) {
        return window.attachEvent('onmessage', this.receive);
      } else {
        throw new Error('cannot bind to postMessage "message" event on window');
      }
    };

    Server.prototype._listEndpoints = function(receiver) {
      var fn, method;
      for (method in receiver) {
        fn = receiver[method];
        this.endpoints.push(method);
      }
      return this.endpoints;
    };

    return Server;

  })();

}).call(this);
